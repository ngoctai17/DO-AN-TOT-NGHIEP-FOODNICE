import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { AttributeType, gl } from '@antv/l7-core';
import { getMask } from '@antv/l7-utils';
import { isNumber } from 'lodash';
import BaseModel from "../../core/BaseModel";
import { PointFillTriangulation } from "../../core/triangulation";

/* babel-plugin-inline-import '../shaders/radar/radar_frag.glsl' */
var pointFillFrag = "\nuniform float u_additive;\nuniform float u_opacity: 1.0;\n\nvarying vec4 v_data;\nvarying vec4 v_color;\nvarying float v_radius;\nvarying vec2 v_exteude;\n#pragma include \"sdf_2d\"\n#pragma include \"picking\"\n\nvoid main() {\n\n  lowp float antialiasblur = v_data.z;\n  float r = v_radius / (v_radius);\n\n  float outer_df = sdCircle(v_data.xy, 1.0);\n  float inner_df = sdCircle(v_data.xy, r);\n\n  float opacity_t = smoothstep(0.0, antialiasblur, outer_df);\n\n  gl_FragColor = vec4(v_color.rgb, v_color.a * u_opacity);\n\n  if(u_additive > 0.0) {\n    gl_FragColor *= opacity_t;\n  } else {\n    gl_FragColor.a *= opacity_t;\n  }\n\n  if(gl_FragColor.a > 0.0) {\n    gl_FragColor = filterColor(gl_FragColor);\n  }\n\n  vec2 extrude =  v_exteude;\n  vec2 dir = normalize(extrude);\n  vec2 baseDir = vec2(1.0, 0.0);\n  float pi = 3.14159265359;\n  // full circle\n  // float rades = dot(dir, baseDir);\n  // float flag = sign(dir.y);\n  // float radar_v = (flag - 1.0) * -0.5 + flag * acos(rades)/pi/2.0;\n  \n  // half circle\n  float flag = sign(dir.y);\n  float rades = dot(dir, baseDir);\n  float radar_v = (flag - 1.0) * -0.5 * acos(rades)/pi;\n  // simple AA\n  if(radar_v > 0.99) {\n    radar_v = 1.0 - (radar_v - 0.99)/0.01;\n  }\n\n  gl_FragColor.a *= radar_v;\n}\n";

/* babel-plugin-inline-import '../shaders/radar/radar_vert.glsl' */
var pointFillVert = "attribute vec4 a_Color;\nattribute vec3 a_Position;\nattribute vec3 a_Extrude;\nattribute float a_Size;\nuniform float u_speed: 1.0;\nuniform float u_time;\n\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\nuniform float u_isMeter;\n\nvarying vec4 v_data;\nvarying vec4 v_color;\nvarying float v_radius;\nvarying vec2 v_exteude;\n\n#pragma include \"projection\"\n#pragma include \"picking\"\n\nvoid main() {\n  vec3 extrude = a_Extrude;\n  float newSize = setPickingSize(a_Size);\n\n  float time = u_time * u_speed;\n  mat2 rotateMatrix = mat2( \n    cos(time), sin(time), \n    -sin(time), cos(time)\n  );\n  v_exteude = rotateMatrix * a_Extrude.xy;\n\n  // unpack color(vec2)\n  v_color = a_Color;\n\n  // radius(16-bit)\n  v_radius = newSize;\n\n  // anti-alias\n  float blur = 0.0;\n  float antialiasblur = -max(2.0 / u_DevicePixelRatio / a_Size, blur);\n\n  vec2 offset = (extrude.xy * (newSize));\n  vec3 aPosition = a_Position;\n  if(u_isMeter < 1.0) {\n    // \u4E0D\u4EE5\u7C73\u4E3A\u5B9E\u9645\u5355\u4F4D\n    offset = project_pixel(offset);\n  } else {\n    // \u4EE5\u7C73\u4E3A\u5B9E\u9645\u5355\u4F4D\n    antialiasblur *= pow(19.0 - u_Zoom, 2.0);\n    antialiasblur = max(antialiasblur, -0.01);\n    // offset *= 0.5;\n\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\n      aPosition.xy += offset;\n      offset.x = 0.0;\n      offset.y = 0.0;\n    }\n  }\n\n  v_data = vec4(extrude.x, extrude.y, antialiasblur, -1.0);\n\n  vec4 project_pos = project_position(vec4(aPosition.xy, 0.0, 1.0));\n\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n    gl_Position = u_Mvp * vec4(project_pos.xy + offset, 0.0, 1.0);\n  } else {\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, project_pixel(setPickingOrder(0.0)), 1.0));\n  }\n\n  setPickingColor(a_PickingColor);\n}\n";
import { Version } from '@antv/l7-maps';

var RadarModel = /*#__PURE__*/function (_BaseModel) {
  _inherits(RadarModel, _BaseModel);

  var _super = _createSuper(RadarModel);

  function RadarModel() {
    var _this;

    _classCallCheck(this, RadarModel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "meter2coord", 1);

    _defineProperty(_assertThisInitialized(_this), "isMeter", false);

    return _this;
  }

  _createClass(RadarModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
          _ref$opacity = _ref.opacity,
          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
          blend = _ref.blend,
          _ref$speed = _ref.speed,
          speed = _ref$speed === void 0 ? 1 : _ref$speed;

      return {
        u_isMeter: Number(this.isMeter),
        u_speed: speed,
        u_additive: blend === 'additive' ? 1.0 : 0.0,
        u_opacity: isNumber(opacity) ? opacity : 1.0
      };
    }
  }, {
    key: "getAnimateUniforms",
    value: function getAnimateUniforms() {
      var _ref2 = this.layer.getLayerConfig(),
          _ref2$animateOption = _ref2.animateOption,
          animateOption = _ref2$animateOption === void 0 ? {
        enable: false
      } : _ref2$animateOption;

      return {
        u_animate: this.animateOption2Array(animateOption),
        u_time: this.layer.getLayerAnimateTime()
      };
    }
  }, {
    key: "getAttribute",
    value: function getAttribute() {
      return this.styleAttributeService.createAttributesAndIndices(this.layer.getEncodedData(), PointFillTriangulation);
    }
  }, {
    key: "initModels",
    value: function () {
      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _ref3, _ref3$unit, unit, version;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _ref3 = this.layer.getLayerConfig(), _ref3$unit = _ref3.unit, unit = _ref3$unit === void 0 ? 'l7size' : _ref3$unit;
                version = this.mapService.version;

                if (unit === 'meter' && version !== Version.DEFUALT && version !== Version.GLOBEL) {
                  this.isMeter = true;
                  this.calMeter2Coord();
                }

                _context.next = 5;
                return this.buildModels();

              case 5:
                return _context.abrupt("return", _context.sent);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function initModels() {
        return _initModels.apply(this, arguments);
      }

      return initModels;
    }()
    /**
     * 计算等面积点图层（unit meter）笛卡尔坐标标度与世界坐标标度的比例
     * @returns
     */

  }, {
    key: "calMeter2Coord",
    value: function calMeter2Coord() {
      var _this$layer$getSource = _slicedToArray(this.layer.getSource().extent, 4),
          minLng = _this$layer$getSource[0],
          minLat = _this$layer$getSource[1],
          maxLng = _this$layer$getSource[2],
          maxLat = _this$layer$getSource[3];

      var center = [(minLng + maxLng) / 2, (minLat + maxLat) / 2];
      var version = this.mapService.version;

      if (version === Version.MAPBOX && window.mapboxgl.MercatorCoordinate) {
        var coord = window.mapboxgl.MercatorCoordinate.fromLngLat({
          lng: center[0],
          lat: center[1]
        }, 0);
        var offsetInMeters = 1;
        var offsetInMercatorCoordinateUnits = offsetInMeters * coord.meterInMercatorCoordinateUnits();
        var westCoord = new window.mapboxgl.MercatorCoordinate(coord.x - offsetInMercatorCoordinateUnits, coord.y, coord.z);
        var westLnglat = westCoord.toLngLat();
        this.meter2coord = center[0] - westLnglat.lng;
        return;
      } // @ts-ignore


      var m1 = this.mapService.meterToCoord(center, [minLng, minLat]); // @ts-ignore

      var m2 = this.mapService.meterToCoord(center, [maxLng === minLng ? maxLng + 0.1 : maxLng, maxLat === minLat ? minLat + 0.1 : maxLat]);
      this.meter2coord = (m1 + m2) / 2;

      if (!this.meter2coord) {
        // Tip: 兼容单个数据导致的 m1、m2 为 NaN
        this.meter2coord = 7.70681090738883;
      }
    }
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _ref4, _ref4$mask, mask, _ref4$maskInside, maskInside, model;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _ref4 = this.layer.getLayerConfig(), _ref4$mask = _ref4.mask, mask = _ref4$mask === void 0 ? false : _ref4$mask, _ref4$maskInside = _ref4.maskInside, maskInside = _ref4$maskInside === void 0 ? true : _ref4$maskInside;
                _context2.next = 3;
                return this.layer.buildLayerModel({
                  moduleName: 'pointRadar',
                  vertexShader: pointFillVert,
                  fragmentShader: pointFillFrag,
                  triangulation: PointFillTriangulation,
                  depth: {
                    enable: false
                  },
                  blend: this.getBlend(),
                  stencil: getMask(mask, maskInside)
                });

              case 3:
                model = _context2.sent;
                return _context2.abrupt("return", [model]);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function buildModels() {
        return _buildModels.apply(this, arguments);
      }

      return buildModels;
    }()
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$dataTexture;

      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();
    } // overwrite baseModel func

  }, {
    key: "animateOption2Array",
    value: function animateOption2Array(option) {
      return [option.enable ? 0 : 1.0, option.speed || 1, option.rings || 3, 0];
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      var _this2 = this;

      this.styleAttributeService.registerStyleAttribute({
        name: 'extrude',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Extrude',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];
            var extrudeIndex = attributeIdx % 4 * 3;
            return [extrude[extrudeIndex], extrude[extrudeIndex + 1], extrude[extrudeIndex + 2]];
          }
        }
      }); // point layer size;

      this.styleAttributeService.registerStyleAttribute({
        name: 'size',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Size',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature) {
            var _feature$size = feature.size,
                size = _feature$size === void 0 ? 5 : _feature$size;
            return Array.isArray(size) ? [size[0] * _this2.meter2coord] : [size * _this2.meter2coord];
          }
        }
      });
    }
  }]);

  return RadarModel;
}(BaseModel);

export { RadarModel as default };