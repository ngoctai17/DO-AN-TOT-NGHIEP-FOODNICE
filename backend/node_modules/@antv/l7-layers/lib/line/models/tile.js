"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _l7Core = require("@antv/l7-core");

var _l7Utils = require("@antv/l7-utils");

var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));

var _triangulation = require("../../core/triangulation");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/* babel-plugin-inline-import '../../shader/minify_picking_frag.glsl' */
var line_tile_frag = "uniform float u_opacity : 1.0;\nvarying vec4 v_color;\n\n#pragma include \"picking\"\n\nvoid main() {\n  gl_FragColor = v_color;\n  gl_FragColor.a *= u_opacity;\n  gl_FragColor = filterColor(gl_FragColor);\n}\n";

/* babel-plugin-inline-import '../shaders/tile/line_tile_vert.glsl' */
var line_tile_vert = "attribute float a_Miter;\nattribute vec4 a_Color;\nattribute vec2 a_Size;\nattribute vec3 a_Normal;\nattribute vec3 a_Position;\n\n// uniform vec2 u_tileOrigin;\n// uniform float u_coord;\n\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\n\n\n#pragma include \"projection\"\n#pragma include \"picking\"\n\nvarying vec4 v_color;\n\nvoid main() {\n  v_color = a_Color;\n\n  vec3 size = a_Miter * setPickingSize(a_Size.x) * reverse_offset_normal(a_Normal);\n  \n  vec2 offset = project_pixel(size.xy);\n\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0, 1.0));\n\n  // if(u_coord > 0.0) { // \u4F7F\u7528\u7ECF\u7EAC\u5EA6\u5750\u6807\n      if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n      gl_Position = u_Mvp * (vec4(project_pos.xy + offset, 0.0, 1.0));\n    } else {\n      gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, 0.0, 1.0));\n    }\n  // } else { // \u4F7F\u7528\u504F\u79FB\u5750\u6807\n  //   vec2 pointPos = a_Position.xy;\n  //   vec4 tileWorld = vec4(project_mvt_offset_position(vec4(u_tileOrigin, 0.0, 1.0)).xyz, 1.0); // \u74E6\u7247\u8D77\u59CB\u70B9\u7684\u4E16\u754C\u5750\u6807\n\n  //   vec2 pointOffset =  pointPos *  pow(2.0, u_Zoom); // \u74E6\u7247\u5185\u7684\u70B9\u7684\u504F\u79FB\u5750\u6807\n    \n  //   tileWorld.xy += pointOffset;\n\n  //   tileWorld.xy += offset;\n\n  //   if (u_CoordinateSystem == COORDINATE_SYSTEM_METER_OFFSET || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\n  //     // Needs to be divided with project_uCommonUnitsPerMeter\n  //     tileWorld.w *= u_PixelsPerMeter.z;\n  //   }\n  //   gl_Position = u_ViewProjectionMatrix * tileWorld + u_ViewportCenterProjection;\n  // }\n\n  setPickingColor(a_PickingColor);\n}\n";

/* babel-plugin-inline-import '../../shader/minify_frag.glsl' */
var line_tile_map_frag = "uniform float u_opacity : 1.0;\nuniform vec4 u_color;\n\nvoid main() {\n  gl_FragColor = u_color;\n  gl_FragColor.a *= u_opacity;\n}\n";

/* babel-plugin-inline-import '../shaders/tile/line_tile_map_vert.glsl' */
var line_tile_map_vert = "attribute float a_Miter;\nattribute vec4 a_Color;\nattribute vec3 a_Normal;\nattribute vec3 a_Position;\n\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\nuniform float u_size;\n\n#pragma include \"projection\"\n\nvoid main() {\n\n  vec3 size = a_Miter * u_size * reverse_offset_normal(a_Normal);\n  \n  vec2 offset = project_pixel(size.xy);\n\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0, 1.0));\n\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n    gl_Position = u_Mvp * (vec4(project_pos.xy + offset, 0.0, 1.0));\n  } else {\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, 0.0, 1.0));\n  }\n}\n";

var LineModel = /*#__PURE__*/function (_BaseModel) {
  (0, _inherits2.default)(LineModel, _BaseModel);

  var _super = _createSuper(LineModel);

  function LineModel() {
    (0, _classCallCheck2.default)(this, LineModel);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(LineModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
          _ref$opacity = _ref.opacity,
          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
          usage = _ref.usage,
          _ref$color = _ref.color,
          color = _ref$color === void 0 ? '#fff' : _ref$color,
          _ref$size = _ref.size,
          size = _ref$size === void 0 ? 1 : _ref$size;

      return {
        // u_tileOrigin: tileOrigin || [0, 0],
        // u_coord: coord === 'lnglat' ? 1.0 : 0.0,
        u_opacity: Number(opacity),
        u_color: usage === 'basemap' ? (0, _l7Utils.rgb2arr)(color) : [0, 0, 0, 0],
        u_size: usage === 'basemap' ? size : 1
      };
    }
  }, {
    key: "initModels",
    value: function () {
      var _initModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.buildModels();

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function initModels() {
        return _initModels.apply(this, arguments);
      }

      return initModels;
    }()
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var _ref2, _ref2$mask, mask, _ref2$maskInside, maskInside, _ref2$depth, depth, usage, model;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _ref2 = this.layer.getLayerConfig(), _ref2$mask = _ref2.mask, mask = _ref2$mask === void 0 ? false : _ref2$mask, _ref2$maskInside = _ref2.maskInside, maskInside = _ref2$maskInside === void 0 ? true : _ref2$maskInside, _ref2$depth = _ref2.depth, depth = _ref2$depth === void 0 ? false : _ref2$depth, usage = _ref2.usage;
                this.layer.triangulation = _triangulation.LineTriangulation;
                _context2.next = 4;
                return this.layer.buildLayerModel({
                  moduleName: 'lineTile_' + usage,
                  vertexShader: usage === 'basemap' ? line_tile_map_vert : line_tile_vert,
                  fragmentShader: usage === 'basemap' ? line_tile_map_frag : line_tile_frag,
                  triangulation: _triangulation.LineTriangulation,
                  blend: this.getBlend(),
                  depth: {
                    enable: depth
                  },
                  stencil: (0, _l7Utils.getMask)(mask, maskInside),
                  pick: usage !== 'basemap'
                });

              case 4:
                model = _context2.sent;
                return _context2.abrupt("return", [model]);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function buildModels() {
        return _buildModels.apply(this, arguments);
      }

      return buildModels;
    }()
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      var _this$layer$getLayerC = this.layer.getLayerConfig(),
          usage = _this$layer$getLayerC.usage;

      if (usage !== 'basemap') {
        this.styleAttributeService.registerStyleAttribute({
          name: 'size',
          type: _l7Core.AttributeType.Attribute,
          descriptor: {
            name: 'a_Size',
            buffer: {
              // give the WebGL driver a hint that this buffer may change
              usage: _l7Core.gl.DYNAMIC_DRAW,
              data: [],
              type: _l7Core.gl.FLOAT
            },
            size: 2,
            update: function update(feature) {
              var _feature$size = feature.size,
                  size = _feature$size === void 0 ? 1 : _feature$size;
              return Array.isArray(size) ? [size[0], size[1]] : [size, 0];
            }
          }
        });
      }

      this.styleAttributeService.registerStyleAttribute({
        name: 'normal',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Normal',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: _l7Core.gl.STATIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {
            return normal;
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'miter',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Miter',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: _l7Core.gl.STATIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex) {
            return [vertex[4]];
          }
        }
      });
    }
  }]);
  return LineModel;
}(_BaseModel2.default);

exports.default = LineModel;