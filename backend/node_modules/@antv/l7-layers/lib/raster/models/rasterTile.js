"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _l7Core = require("@antv/l7-core");

var _l7Utils = require("@antv/l7-utils");

var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));

var _triangulation = require("../../core/triangulation");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/* babel-plugin-inline-import '../shaders/raster_2d_frag.glsl' */
var rasterFrag = "precision mediump float;\nuniform float u_opacity: 1.0;\nuniform sampler2D u_texture;\nuniform sampler2D u_colorTexture;\nuniform float u_min;\nuniform float u_max;\nuniform vec2 u_domain;\nuniform float u_noDataValue;\nuniform bool u_clampLow: true;\nuniform bool u_clampHigh: true;\nvarying vec2 v_texCoord;\nbool isnan_emu(float x) { return (x > 0.0 || x < 0.0) ? x != x : x != 0.0; }\n\n\nvoid main() {\n\n  float value = texture2D(u_texture,vec2(v_texCoord.x,v_texCoord.y)).r;\n  if (value == u_noDataValue || isnan_emu(value))\n    gl_FragColor = vec4(0.0, 0, 0, 0.0);\n  else if ((!u_clampLow && value < u_domain[0]) || (!u_clampHigh && value > u_domain[1]))\n    gl_FragColor = vec4(0, 0, 0, 0);\n  else {\n    float normalisedValue =(value - u_domain[0]) / (u_domain[1] -u_domain[0]);\n    vec4 color = texture2D(u_colorTexture,vec2(normalisedValue, 0));\n    gl_FragColor = color;\n    gl_FragColor.a =  gl_FragColor.a * u_opacity ;\n  }\n}\n";

/* babel-plugin-inline-import '../shaders/raster_2d_vert.glsl' */
var rasterVert = "precision highp float;\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\nattribute vec3 a_Position;\nattribute vec2 a_Uv;\nvarying vec2 v_texCoord;\n#pragma include \"projection\"\nvoid main() {\n   v_texCoord = a_Uv;\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\n\n   if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n      gl_Position = u_Mvp * (vec4(project_pos.xy,0., 1.0));\n   } else {\n      gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\n   }\n}\n";

var RasterModel = /*#__PURE__*/function (_BaseModel) {
  (0, _inherits2.default)(RasterModel, _BaseModel);

  var _super = _createSuper(RasterModel);

  function RasterModel() {
    (0, _classCallCheck2.default)(this, RasterModel);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(RasterModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var createTexture2D = this.rendererService.createTexture2D;

      var _ref = this.layer.getLayerConfig(),
          _ref$colorTexture = _ref.colorTexture,
          colorTexture = _ref$colorTexture === void 0 ? createTexture2D({
        data: [],
        width: 0,
        height: 0,
        flipY: false
      }) : _ref$colorTexture,
          _ref$opacity = _ref.opacity,
          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
          _ref$clampLow = _ref.clampLow,
          clampLow = _ref$clampLow === void 0 ? true : _ref$clampLow,
          _ref$clampHigh = _ref.clampHigh,
          clampHigh = _ref$clampHigh === void 0 ? true : _ref$clampHigh,
          _ref$noDataValue = _ref.noDataValue,
          noDataValue = _ref$noDataValue === void 0 ? -9999999 : _ref$noDataValue,
          _ref$domain = _ref.domain,
          domain = _ref$domain === void 0 ? [0, 1] : _ref$domain;

      return {
        u_opacity: opacity || 1,
        u_texture: this.texture,
        u_domain: domain,
        u_clampLow: clampLow,
        u_clampHigh: typeof clampHigh !== 'undefined' ? clampHigh : clampLow,
        u_noDataValue: noDataValue,
        u_colorTexture: colorTexture
      };
    }
  }, {
    key: "initModels",
    value: function () {
      var _initModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var _ref2, _ref2$mask, mask, _ref2$maskInside, maskInside, source, createTexture2D, parserDataItem, model;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _ref2 = this.layer.getLayerConfig(), _ref2$mask = _ref2.mask, mask = _ref2$mask === void 0 ? false : _ref2$mask, _ref2$maskInside = _ref2.maskInside, maskInside = _ref2$maskInside === void 0 ? true : _ref2$maskInside;
                source = this.layer.getSource();
                createTexture2D = this.rendererService.createTexture2D;
                parserDataItem = source.data.dataArray[0];
                this.texture = createTexture2D({
                  data: parserDataItem.data,
                  width: parserDataItem.width,
                  height: parserDataItem.height,
                  format: _l7Core.gl.LUMINANCE,
                  type: _l7Core.gl.FLOAT
                });
                _context.next = 7;
                return this.layer.buildLayerModel({
                  moduleName: 'rasterTileImageData',
                  vertexShader: rasterVert,
                  fragmentShader: rasterFrag,
                  triangulation: _triangulation.RasterImageTriangulation,
                  depth: {
                    enable: false
                  },
                  stencil: (0, _l7Utils.getMask)(mask, maskInside)
                });

              case 7:
                model = _context.sent;
                return _context.abrupt("return", [model]);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function initModels() {
        return _initModels.apply(this, arguments);
      }

      return initModels;
    }()
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.initModels();

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function buildModels() {
        return _buildModels.apply(this, arguments);
      }

      return buildModels;
    }()
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$texture;

      (_this$texture = this.texture) === null || _this$texture === void 0 ? void 0 : _this$texture.destroy();
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Uv',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex) {
            return [vertex[3], vertex[4]];
          }
        }
      });
    }
  }]);
  return RasterModel;
}(_BaseModel2.default);

exports.default = RasterModel;