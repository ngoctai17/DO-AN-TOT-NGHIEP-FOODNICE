var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/color.ts
var color_exports = {};
__export(color_exports, {
  decodePickingColor: () => decodePickingColor,
  encodePickingColor: () => encodePickingColor,
  generateColorRamp: () => generateColorRamp,
  isColor: () => isColor,
  rgb2arr: () => rgb2arr
});
module.exports = __toCommonJS(color_exports);
var d3 = __toESM(require("d3-color"));
var import_mini_adapter = require("./mini-adapter");
function isColor(str) {
  if (typeof str === "string") {
    return !!d3.color(str);
  } else {
    return false;
  }
}
function rgb2arr(str) {
  const color2 = d3.color(str);
  const arr = [0, 0, 0, 0];
  if (color2 != null) {
    arr[0] = color2.r / 255;
    arr[1] = color2.g / 255;
    arr[2] = color2.b / 255;
    arr[3] = color2.opacity;
  }
  return arr;
}
function decodePickingColor(color2) {
  const i1 = color2 && color2[0];
  const i2 = color2 && color2[1];
  const i3 = color2 && color2[2];
  const index = i1 + i2 * 256 + i3 * 65536 - 1;
  return index;
}
function encodePickingColor(featureIdx) {
  return [
    featureIdx + 1 & 255,
    featureIdx + 1 >> 8 & 255,
    featureIdx + 1 >> 8 >> 8 & 255
  ];
}
function generateColorRamp(colorRamp) {
  let canvas = import_mini_adapter.$window.document.createElement("canvas");
  let ctx = canvas.getContext("2d");
  canvas.width = 256;
  canvas.height = 1;
  let data = null;
  if (colorRamp.weights) {
    let count = 0;
    colorRamp.weights.map((w, index) => {
      const color2 = colorRamp.colors[index] || "rgba(0, 0, 0, 0)";
      const stop = count + w;
      ctx.fillStyle = color2;
      ctx.fillRect(count * 256, 0, stop * 256, 1);
      count = stop;
    });
  } else {
    const gradient = ctx.createLinearGradient(0, 0, 256, 1);
    const min = colorRamp.positions[0];
    const max = colorRamp.positions[colorRamp.positions.length - 1];
    for (let i = 0; i < colorRamp.colors.length; ++i) {
      const value = (colorRamp.positions[i] - min) / (max - min);
      gradient.addColorStop(value, colorRamp.colors[i]);
    }
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 256, 1);
  }
  if (!import_mini_adapter.isMini) {
    data = ctx.getImageData(0, 0, 256, 1).data;
    const imageData = ctx.createImageData(256, 1);
    for (let i = 0; i < imageData.data.length; i += 4) {
      imageData.data[i + 0] = data[i + 0];
      imageData.data[i + 1] = data[i + 1];
      imageData.data[i + 2] = data[i + 2];
      imageData.data[i + 3] = data[i + 3];
    }
    canvas = null;
    ctx = null;
    return imageData;
  } else {
    data = new Uint8ClampedArray(ctx.getImageData(0, 0, 256, 1).data);
    canvas = null;
    ctx = null;
    return { data, width: 256, height: 1 };
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decodePickingColor,
  encodePickingColor,
  generateColorRamp,
  isColor,
  rgb2arr
});
